from ultralytics import YOLO
import shutil
from pathlib import Path
import os
import zipfile
import random
import platform
import torch
from typing import Optional, List

# =============================================
# = –ì –õ –û –ë –ê –õ –¨ –ù –´ –ï   –ù –ê –° –¢ –† –û –ô –ö –ò =
# =============================================

BASE_DIR = Path("C:/temp/apple")
DATA_DIR = BASE_DIR / "data"
TRAIN_IMAGES = DATA_DIR / "train" / "images"
TRAIN_LABELS = DATA_DIR / "train" / "labels"
VAL_IMAGES = DATA_DIR / "val" / "images"
VAL_LABELS = DATA_DIR / "val" / "labels"

CLEAN_BEFORE_PROCESS = True
VAL_RATIO = 0.2
SEED = 42


# =============================================
# = –í –° –ü –û –ú –û –ì –ê –¢ –ï –õ –¨ –ù –´ –ï   –§ –£ –ù –ö –¶ –ò –ò =
# =============================================

def clean_directory(*paths: Path) -> None:
    """–û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    for path in paths:
        if path.exists():
            for item in path.glob('*'):
                if item.is_file():
                    item.unlink()
                else:
                    shutil.rmtree(item)
            print(f"–û—á–∏—â–µ–Ω–æ: {path}")
        else:
            path.mkdir(parents=True, exist_ok=True)
            print(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path}")


def find_latest_zip() -> Optional[Path]:
    """–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ZIP-–∞—Ä—Ö–∏–≤–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"""
    zip_files = list(BASE_DIR.glob("project-*-*.zip"))
    return max(zip_files, key=lambda x: x.stat().st_mtime) if zip_files else None


def unzip_and_process(zip_path: Path) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞"""
    extract_dir = BASE_DIR / zip_path.stem
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)
    print(f"–ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤: {extract_dir}")

    # –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –≤ train
    for data_type in ["images", "labels"]:
        src = extract_dir / data_type
        dest = TRAIN_IMAGES if data_type == "images" else TRAIN_LABELS
        dest.mkdir(parents=True, exist_ok=True)

        moved_files = 0
        for file in src.glob('*'):
            shutil.move(str(file), str(dest))
            moved_files += 1
        print(f"–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {moved_files} —Ñ–∞–π–ª–æ–≤ –≤ {dest}")

    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for filename in ["classes.txt", "notes.json"]:
        src = extract_dir / filename
        if src.exists():
            shutil.copy(src, DATA_DIR / "train")
            print(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {filename}")


def create_validation_set() -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏"""
    random.seed(SEED)
    all_images = list(TRAIN_IMAGES.glob('*'))
    random.shuffle(all_images)

    num_val = int(len(all_images) * VAL_RATIO)
    val_images = all_images[:num_val]

    for img_path in val_images:
        # –ü–µ—Ä–µ–Ω–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        dest_img = VAL_IMAGES / img_path.name
        shutil.move(str(img_path), str(dest_img))

        # –ü–µ—Ä–µ–Ω–æ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–∫
        label_name = img_path.stem + '.txt'
        src_label = TRAIN_LABELS / label_name
        if src_label.exists():
            dest_label = VAL_LABELS / label_name
            shutil.move(str(src_label), str(dest_label))

    print(f"–°–æ–∑–¥–∞–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑ {num_val} —Ñ–∞–π–ª–æ–≤")


def get_device() -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    try:
        if platform.system() == 'Darwin':
            return 'mps' if torch.backends.mps.is_available() else 'cpu'
        return 'cuda' if torch.cuda.is_available() else 'cpu'
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
        return 'cpu'


def validate_paths() -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
    required_paths = [
        BASE_DIR / "data.yaml",
        TRAIN_IMAGES,
        TRAIN_LABELS,
        VAL_IMAGES,
        VAL_LABELS,
        DATA_DIR / "train" / "classes.txt"
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ–π
    for path in required_paths:
        if not path.exists():
            raise FileNotFoundError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: {path}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    train_images = list(TRAIN_IMAGES.glob("*"))
    val_images = list(VAL_IMAGES.glob("*"))

    if not train_images:
        raise ValueError(f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤ {TRAIN_IMAGES}")
    if not val_images:
        raise ValueError(f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ {VAL_IMAGES}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª–∞—Å—Å–æ–≤
    with open(DATA_DIR / "train" / "classes.txt", "r") as f:
        classes = [line.strip() for line in f.readlines() if line.strip()]

    expected_classes = ["apple", "defect", "orange", "pear"]
    if classes != expected_classes:
        raise ValueError(
            f"–ö–ª–∞—Å—Å—ã –≤ classes.txt –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º. –ü–æ–ª—É—á–µ–Ω–æ: {classes}, –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_classes}")


# =============================================
# = –û –° –ù –û –í –ù –û –ô   –ë –õ –û –ö   –í –´ –ü –û –õ –ù –ï –ù –ò –Ø =
# =============================================

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å"""
    device = get_device()
    print(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.upper()}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    DATA_DIR.mkdir(parents=True, exist_ok=True)

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if CLEAN_BEFORE_PROCESS:
        clean_directory(TRAIN_IMAGES, TRAIN_LABELS, VAL_IMAGES, VAL_LABELS)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞
    if (latest_zip := find_latest_zip()) is not None:
        unzip_and_process(latest_zip)
    else:
        print("‚ö†Ô∏è –ê—Ä—Ö–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏
    create_validation_set()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        validate_paths()
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
    print("\n–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è...")
    model = YOLO("yolo11n.pt")

    try:
        model.train(
            data=BASE_DIR / "data.yaml",
            epochs=100,
            imgsz=640,
            device=device,
            verbose=True
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")


if __name__ == "__main__":
    main()